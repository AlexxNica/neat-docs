@charset "UTF-8";
/*! normalize.css v3.0.1 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/*
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/*
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 8/9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

th,
td {
  padding: 0; }

/* Neat 1.7.0.pre
 * http://neat.bourbon.io
 * Copyright 2012-2014 thoughtbot, inc.
 * MIT License */
/**
 * Returns a media context (media query / grid context) that can be stored in a variable and passed to `media()` as a single-keyword argument. Media contexts defined using `new-breakpoint` are used by the visual grid, as long as they are defined before importing Neat.
 *
 * @param {List} $query
 *   - A list of media query features and values. Each `$feature` should have a corresponding `$value`. If there is only a single `$value` in `$query`, `$default-feature` is going to be used. The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`). For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).
 *
 * @param {Number (unitless)} $total-columns ($grid-columns)
 *   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.
 *
 * @example scss - Usage
 *   $mobile: new-breakpoint(max-width 480px 4);
 *
 *   .element {
 *     @include media($mobile) {
 *       @include span-columns(4);
 *     }
 *   }
 *
 * @example css - CSS Output
 *   @media screen and (max-width: 480px) {
 *     .element {
 *       display: block;
 *       float: left;
 *       margin-right: 7.42297%;
 *       width: 100%;
 *     }
 *     .element:last-child {
 *       margin-right: 0;
 *     }
 *   }
 */
/**
 * Sets the relative width of a single grid column. The unit used should be the same one used to define `$gutter`. To learn more about golden-ratio() see [Bourbon docs](http://bourbon.io/docs/#golden-ratio). Set with a `!global` flag.
 *
 * @type Number (Unit)
 */
/**
 * Sets the relative width of a single grid gutter. The unit used should be the same one used to define `$column`. To learn more about golden-ratio() see [Bourbon docs](http://bourbon.io/docs/#golden-ratio). Set with the `!global` flag.
 *
 * @type Number (Unit)
 */
/**
 * Sets the total number of columns in the grid. Its value can be overridden inside a media query using the `media()` mixin. Set with the `!global` flag.
 *
 * @type Number (Unitless)
 */
/**
 * Sets the max-width property of the element that includes `outer-container()`. To learn more about `em()` see [Bourbon docs](http://bourbon.io/docs/#px-to-em). Set with the `!global` flag.
 *
 * @type Number (Unit)
 */
/**
 * When set to true, it sets the box-sizing property of all elements to `border-box`. Set with a `!global` flag.
 *
 * @type Bool
 *
 * @example css - CSS Output
 *   * {
 *     -webkit-box-sizing: border-box;
 *     -moz-box-sizing: border-box;
 *     box-sizing: border-box;
 *   }
 */
/**
 * Sets the default [media feature](http://www.w3.org/TR/css3-mediaqueries/#media) that `media()` and `new-breakpoint()` revert to when only a breakpoint value is passed. Set with a `!global` flag.
 *
 * @type String
 */
/**
 * Sets the default layout direction of the grid. Can be `LTR` or `RTL`. Set with a `!global` flag.
 *
 * @type String
 */
/**
 * Displays the visual grid when set to true. The overlaid grid may be few pixels off depending on the browser's rendering engine and pixel rounding algorithm. Set with the `!global` flag.
 *
 * @type Bool
 */
/**
 * Sets the visual grid color. Set with `!global` flag.
 *
 * @type Color
 */
/**
 * Sets the `z-index` property of the visual grid. Can be `back` (behind content) or `front` (in front of content). Set with `!global` flag.
 *
 * @type String
 */
/**
 * Sets the opacity property of the visual grid. Set with `!global` flag.
 *
 * @type Number (unitless)
 */
/**
 * Disable all deprecation warnings. Defaults to `false`. Set with a `!global` flag.
 *
 * @type Bool
 */
html {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

*, *:before, *:after {
  -webkit-box-sizing: inherit;
  -moz-box-sizing: inherit;
  box-sizing: inherit; }

/**
 * Removes the element's gutter margin, regardless of its position in the grid hierarchy or display property. It can target a specific element, or every `nth-child` occurrence. Works only with `block` layouts.
 *
 * @param {List} $query (block)
 *   - List of arguments. Supported arguments are `nth-child` selectors (targets a specific pseudo element) and `auto` (targets `last-child`). When passed an `nth-child` argument of type `*n` with `block` display, the omega mixin automatically adds a clear to the `*n+1` th element. Not that composite arguments such as `2n+1` do not support this feature. **Deprecation warning**: The omega mixin will no longer take a $direction argument. To change the layout direction, use row($direction) or set $default-layout-direction instead.
 *
 * @example scss - Usage
 *   .element {
 *     @include omega;
 *   }
 *
 *   .nth-element {
 *     @include omega(4n);
 *   }
 *
 * @example css - CSS Output
 *   .element {
 *     margin-right: 0;
 *   }
 *
 *   .nth-element:nth-child(4n) {
 *     margin-right: 0;
 *   }
 *
 *   .nth-element:nth-child(4n+1) {
 *     clear: left;
 *   }
 */
/**
 * Makes an element a outer container by centring it in the viewport, clearing its floats, and setting its `max-width`.
 * Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.
 *
 * @param {Number (unit)} $local-max-width ($max-width)
 *   - Max width to be applied to the element. Can be a percentage or a measure.
 *
 * @example scss - Usage
 *   .element {
 *     @include outer-container(100%);
 *   }
 *
 * @example css - CSS Output
 *   .element {
 *     *zoom: 1;
 *     max-width: 100%;
 *     margin-left: auto;
 *     margin-right: auto;
 *   }
 *
 *   .element:before, .element:after {
 *     content: " ";
 *     display: table;
 *   }
 *
 *   .element:after {
 *     clear: both;
 *   }
 */
/**
 * Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.
 *
 * @param {List} $span
 *   - A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional). If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid. The values can be separated with any string such as `of`, `/`, etc.
 *
 * @param {String} $display (block)
 *   - Sets the display property of the element. By default it sets the display propert of the element to `block`. If passed `block-collapse`, it also removes the margin gutter by adding it to the element width. `table` sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.
 *
 * @example scss - Usage
 *   .element {
 *     @include span-columns(6);

 *    .nested-element {
 *      @include span-columns(2 of 6);
 *    }
 *  }
 *
 * @example css - CSS Output
 *   .element {
 *     display: block;
 *     float: left;
 *     margin-right: 2.35765%;
 *     width: 48.82117%;
 *   }
 *
 *   .element:last-child {
 *     margin-right: 0;
 *   }
 *
 *   .element .nested-element {
 *     display: block;
 *     float: left;
 *     margin-right: 4.82916%;
 *     width: 30.11389%;
 *   }
 *
 *   .element .nested-element:last-child {
 *     margin-right: 0;
 *   }
 */
/**
 * Designates the element as a row of columns in the grid layout. It clears the floats on the element and sets its display property. Rows can't be nested, but there can be more than one row element—with different display properties—per layout.
 *
 * @param {String} $display (default)
 *   - Sets the display property of the element and the display context that will be used by its children. Can be `block` or `table`.
 *
 * @param {String} $direction ($default-layout-direction)
 *   - Sets the layout direction. Can be `LTR` (left-to-right) or `RTL` (right-to-left).
 *
 * @example scss - Usage
 *   .element {
 *     @include row();
 *   }
 *
 * @example css - CSS Output
 *   .element {
 *     *zoom: 1;
 *     display: block;
 *   }
 *
 *  .element:before, .element:after {
 *    content: " ";
 *    display: table;
 *  }
 *
 *  .element:after {
 *    clear: both;
 *  }
 */
/**
 * Translates an element horizontally by a number of columns. Positive arguments shift the element to the active layout direction, while negative ones shift it to the opposite direction.
 *
 * @param {Number (unitless)} $n-columns (1)
 *   - Number of columns by which the element shifts.
 *
 * @example scss - Usage
 *   .element {
 *     @include shift(-3);
 *   }
 *
 * @example css - CSS output
 *   .element {
 *     margin-left: -25.58941%;
 *   }
 */
/**
 * Translates an element horizontally by a number of columns, in a specific nesting context.
 *
 * @param {List} $shift
 *   - A list containing the number of columns to shift (`$columns`) and the number of columns of the parent element (`$container-columns`). The two values can be separated with any string such as `of`, `/`, etc.
 *
 * @example scss - Usage
 *   .element {
 *     @include shift(-3 of 6);
 *   }
 *
 * @example css - CSS output
 *   .element {
 *     margin-left: -52.41458%;
 *   }
 */
/**
 * Adds padding to the element.
 *
 * @param {List} $padding (flex-gutter())
 *   - A list of padding value(s) to use. Passing `default` in the list will result in using the gutter width as a padding value.
 *
 * @example scss - Usage
 *   .element {
 *     @include pad(30px -20px 10px default);
 *   }
 *
 * @example css - CSS Output
 *   .element {
 *     padding: 30px -20px 10px 2.35765%;
 *   }
 */
/**
 * Forces the element to fill its parent container.
 *
 * @example scss - Usage
 *   .element {
 *     @include fill-parent;
 *   }
 *
 * @example css - CSS Output
 *   .element {
 *     width: 100%;
 *     -webkit-box-sizing: border-box;
 *     -moz-box-sizing: border-box;
 *     box-sizing: border-box;
 *   }
 */
/**
 * Outputs a media-query block with an optional grid context (the total number of columns used in the grid).
 *
 * @param {List} $query
 *   - A list of media query features and values. Each `$feature` should have a corresponding `$value`. If there is only a single `$value` in `$query`, `$default-feature` is going to be used. The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`). For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).
 *
 * @param {Number (unitless)} $total-columns ($grid-columns)
 *   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.
 *
 * @example scss - Usage
 *   .responsive-element {
 *      @include media(769px) {
 *        @include span-columns(6);
 *      }
 *   }
 *
 *  .new-context-element {
 *    @include media(min-width 320px max-width 480px, 6) {
 *      @include span-columns(6);
 *    }
 *  }
 *
 * @example css - CSS Output
 *  @media screen and (min-width: 769px) {
 *    .responsive-element {
 *      display: block;
 *      float: left;
 *      margin-right: 2.35765%;
 *      width: 48.82117%;
 *    }
 *
 *    .responsive-element:last-child {
 *      margin-right: 0;
 *    }
 *  }
 *
 *  @media screen and (min-width: 320px) and (max-width: 480px) {
 *    .new-context-element {
 *      display: block;
 *      float: left;
 *      margin-right: 4.82916%;
 *      width: 100%;
 *    }
 *
 *    .new-context-element:last-child {
 *      margin-right: 0;
 *    }
 *  }
 */
/**
 * Resets the active display property to `block`. Particularly useful when changing the display property in a single row.
 *
 * @example scss - Usage
 *   .element {
 *     @include row(table);
 *     // Context changed to table display
 *   }
 *
 *   @include reset-display;
 *   // Context is reset to block display
 */
/**
 * Resets the active layout direction to the default value set in `$default-layout-direction`. Particularly useful when changing the layout direction in a single row.
 *
 * @example scss - Usage
 *   .element {
 *     @include row($direction: RTL);
 *     // Context changed to right-to-left
 *   }
 *
 *   @include reset-layout-direction;
 *   // Context is reset to left-to-right
 */
/**
 * Resets both the active layout direction and the active display property.
 *
 * @example scss - Usage
 *   .element {
 *     @include row(table, RTL);
 *     // Context changed to table table and right-to-left
 *   }
 *
 *   @include reset-all;
 *   // Context is reset to block display and left-to-right
 */
/**
 * Changes the display property used by other mixins called in the code block argument.
 *
 * @param {String} $display (block)
 *   - Display value to be used within the block. Can be `table` or `block`.
 *
 * @example scss
 *   @include display(table) {
 *    .display-table {
 *      @include span-columns(6);
 *     }
 *   }
 *
 * @example css
 *   .display-table {
 *      display: table-cell;
 *      ...
 *   }
 */
/**
 * Changes the direction property used by other mixins called in the code block argument.
 *
 * @param {String} $direction (left-to-right)
 *   - Layout direction to be used within the block. Can be `left-to-right` or `right-to-left`.
 *
 * @example scss - Usage
 *   @include direction(right-to-left) {
 *    .right-to-left-block {
 *      @include span-columns(6);
 *     }
 *   }
 *
 * @example css - CSS Output
 *   .right-to-left-block {
 *     float: right;
 *      ...
 *   }
 */
html, body {
  color: #424242;
  font-family: "Nunito", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  font-size: 1em;
  height: 100%;
  width: 100%;
  margin: 0 auto; }

html {
  padding: 0; }

h1 {
  font-weight: 600;
  margin-top: 0; }

h1, h2 {
  color: #222;
  font-size: 26.652px; }

h2 {
  font-weight: bold;
  margin-bottom: 1em;
  margin-top: 0; }

.title {
  font-size: 1.8em;
  font-weight: normal; }

p + h2, div.highlight + h2 {
  margin-top: 2em; }

h3 {
  font-size: 18px;
  font-weight: 400;
  margin-bottom: 0.5em;
  margin-top: 2em; }

h4, h5, h6 {
  font-size: 13px;
  margin-top: 0; }

p {
  line-height: 1.5em; }

a, a:active, a:visited {
  color: #fc511d;
  text-decoration: none; }

a:hover {
  color: #c93103; }

.alert {
  color: #8B8880;
  font-size: 13px;
  font-style: italic; }

[data-role=content-wrapper] {
  max-width: 68em;
  margin-left: auto;
  margin-right: auto;
  max-width: 60rem;
  padding: 0 1.5em; }
  [data-role=content-wrapper]:after {
    content: "";
    display: table;
    clear: both; }

[class$=label] {
  padding: 0.2em 1em; }

[class$=label] {
  -webkit-border-radius: 1.2em;
          border-radius: 1.2em;
  border: 1px solid #c1a95f;
  color: #c1a95f;
  font-size: 0.8em; }

.main-inner .type-title, nav.side-nav .list li.title a {
  background: rgba(243, 238, 224, 0.3);
  color: #aaa69c;
  font-family: "Titillium Web", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  font-weight: 600;
  letter-spacing: 0.06em;
  text-transform: uppercase; }

@media screen and (min-width: 960px) {
  .main-content {
    width: -webkit-calc(100% - 280px);
    width: calc(100% - 280px);
    margin-left: 280px; } }

.main-inner .tagline {
  margin: 0; }
.main-inner .type-title {
  background: #4797c3;
  color: #FFF;
  font-size: 1em;
  line-height: 1em;
  margin: 0;
  padding: 1.2em 0 1em; }
  .main-inner .type-title [data-role=content-wrapper] {
    display: block; }

.logo {
  width: 5em;
  margin: 0 auto;
  display: block;
  margin-top: 2em;
  margin-bottom: 2em; }

nav.side-nav {
  position: fixed;
  top: 0px;
  left: 0px;
  background-color: #fdfcf9;
  border-right: 1px solid #f3eee0;
  overflow: auto;
  display: none;
  height: 100%; }
  @media screen and (min-width: 960px) {
    nav.side-nav {
      width: 280px;
      display: block; } }
  nav.side-nav .list {
    margin: 0;
    padding: 0; }
    nav.side-nav .list li {
      list-style-type: none; }
      nav.side-nav .list li:first-of-type a {
        border-top: 1px solid #f3eee0; }
      nav.side-nav .list li.deprecated {
        text-decoration: line-through; }
      nav.side-nav .list li.title a {
        padding: 0.7rem;
        font-size: 0.8em; }
      nav.side-nav .list li.title .type-heading {
        margin: 0;
        font-weight: bold;
        font-size: 0.8rem; }
      nav.side-nav .list li a {
        -webkit-transition: all 0.15s ease-out 0s;
        -o-transition: all 0.15s ease-out 0s;
           transition: all 0.15s ease-out 0s;
        border-bottom: 1px solid #f3eee0;
        color: #555;
        display: block;
        padding: 0.7rem;
        position: relative; }
        nav.side-nav .list li a:hover {
          background: #FFF; }
        nav.side-nav .list li a.active:before, nav.side-nav .list li a.inview:before {
          position: absolute;
          top: 1.2em;
          right: 1em;
          height: 8px;
          width: 8px;
          background: #CCC;
          -webkit-border-radius: 50%;
                  border-radius: 50%;
          content: '';
          display: block; }
        nav.side-nav .list li a.active:before {
          background: #fc511d; }

.social {
  background: #7d7c79;
  margin-top: 0;
  padding: .25em 4em; }
  .social:after {
    content: "";
    display: table;
    clear: both; }
  .social li {
    width: -webkit-calc(100% / 3);
    width: calc(100% / 3);
    display: inline-block;
    float: left; }
  .social a {
    overflow: hidden;
    height: 25px;
    width: 25px;
    background: url("../images/social-icons.svg") no-repeat center center;
    -webkit-background-size: 300% 300%;
            background-size: 300%;
    display: block;
    margin: 0 auto; }
    .social a:before {
      content: "";
      display: block;
      width: 0;
      height: 100%; }
    .social a.twitter {
      background-position: left center; }
    .social a.gitter {
      background-position: right center; }

div.highlight {
  background-color: transparent;
  width: 100%; }

pre {
  -webkit-transition: all 0.15s ease-out 0s;
  -o-transition: all 0.15s ease-out 0s;
     transition: all 0.15s ease-out 0s;
  background: #FAF8F2;
  -webkit-border-radius: 0.4em;
          border-radius: 0.4em;
  border: 1px solid #efe8d5;
  margin: 1em 0;
  overflow: visible;
  padding: 1em 0.5em;
  white-space: pre;
  word-wrap: normal; }
  pre::-webkit-scrollbar {
    height: 7px;
    -webkit-appearance: none;
    width: 7px; }
  pre::-webkit-scrollbar-thumb {
    background-color: #ece4cd;
    -webkit-border-radius: 0.4em;
            border-radius: 0.4em;
    -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, 0.5);
            box-shadow: 0 0 1px rgba(255, 255, 255, 0.5); }

p code, ul code, ol code {
  background-color: #FAF8F2;
  border: 1px solid #efe8d5;
  color: #ab9142;
  padding: 0.1em 0.4em;
  -webkit-border-radius: 0.32em;
          border-radius: 0.32em; }

@-webkit-keyframes scale {
  0% {
    -webkit-transform: scale(1); }
  50% {
    -webkit-transform: scale(2); }
  100% {
    -webkit-transform: scale(1); } }
@-o-keyframes scale {
  0% {
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); }
  50% {
    -webkit-transform: scale(2);
    -ms-transform: scale(2);
    -o-transform: scale(2);
    transform: scale(2); }
  100% {
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); } }
@keyframes scale {
  0% {
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); }
  50% {
    -webkit-transform: scale(2);
    -ms-transform: scale(2);
    -o-transform: scale(2);
    transform: scale(2); }
  100% {
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); } }
@-webkit-keyframes slide {
  0% {
    left: 0; }
  50% {
    left: 100px; }
  100% {
    left: 0; } }
@-o-keyframes slide {
  0% {
    left: 0; }
  50% {
    left: 100px; }
  100% {
    left: 0; } }
@keyframes slide {
  0% {
    left: 0; }
  50% {
    left: 100px; }
  100% {
    left: 0; } }
.hljs {
  -webkit-text-size-adjust: none;
  color: #657b83;
  display: block;
  overflow-x: auto;
  padding: 0.5em; }

.hljs-comment,
.hljs-template_comment,
.diff .hljs-header,
.hljs-doctype,
.hljs-pi,
.lisp .hljs-string,
.hljs-javadoc {
  color: #93A1A1; }

.hljs-keyword,
.hljs-winutils,
.method,
.hljs-addition,
.css .hljs-tag,
.hljs-request,
.hljs-status,
.nginx .hljs-title {
  color: #859900; }

.hljs-number,
.hljs-command,
.hljs-string,
.hljs-tag .hljs-value,
.hljs-rules .hljs-value,
.hljs-phpdoc,
.hljs-dartdoc,
.tex .hljs-formula,
.hljs-regexp,
.hljs-hexcolor,
.hljs-link_url {
  color: #2AA198; }

.hljs-title,
.hljs-localvars,
.hljs-chunk,
.hljs-decorator,
.hljs-built_in,
.hljs-identifier,
.vhdl .hljs-literal,
.hljs-id,
.css .hljs-function {
  color: #268BD2; }

.hljs-attribute,
.hljs-variable,
.lisp .hljs-body,
.smalltalk .hljs-number,
.hljs-constant,
.hljs-class .hljs-title,
.hljs-parent,
.hljs-type,
.hljs-link_reference {
  color: #B58900; }

.hljs-preprocessor,
.hljs-preprocessor .hljs-keyword,
.hljs-pragma,
.hljs-shebang,
.hljs-symbol,
.hljs-symbol .hljs-string,
.diff .hljs-change,
.hljs-special,
.hljs-attr_selector,
.hljs-subst,
.hljs-cdata,
.css .hljs-pseudo,
.hljs-header {
  color: #e2481a; }

.hljs-deletion,
.hljs-important {
  color: #DC322F; }

.hljs-link_label {
  color: #6C71C4; }

.tex .hljs-formula {
  background: #EEE8D5; }

.parameters .name {
  font-weight: bold;
  font-size: 1.1em; }
.parameters .meta {
  display: inline-block;
  padding-left: 0;
  margin-left: 0.5em;
  margin-bottom: 0; }
.parameters .type-label {
  border: 1px solid #c1a95f; }
.parameters .required-label, .parameters .default-label {
  background: transparent;
  color: #fc511d;
  border: 1px solid #fc511d; }
.parameters .default-label {
  background: transparent;
  color: #4797c3;
  display: inline-block;
  border-color: #4797c3; }
  .parameters .default-label code {
    background: transparent;
    border: none;
    color: #4797c3;
    font-size: 1em;
    font-weight: bold; }
.parameters .description {
  margin-top: 0;
  padding-left: 1em; }
  .parameters .description p {
    margin-top: 0.7em; }
.parameters ul {
  list-style: none;
  padding-left: 1em; }
.parameters dd {
  margin-left: 0; }

.item {
  border-bottom: 2px #f0ead8 solid;
  padding: 4em 0; }
  .item:last-of-type {
    border: none; }
  .item:target {
    -webkit-transition: all 0.3s;
    -o-transition: all 0.3s;
       transition: all 0.3s;
    -webkit-box-shadow: inset 4px 0 0px 0 #fc511d;
            box-shadow: inset 4px 0 0px 0 #fc511d; }
  .item .title-bar {
    margin-bottom: 1em; }
    .item .title-bar:after {
      content: "";
      display: table;
      clear: both; }
    .item .title-bar .type-label {
      float: left;
      margin: 1.7em 0 0 1em; }
  .item .item-title {
    float: left;
    font-family: "Titillium Web", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
    font-size: 2.4em;
    font-weight: 500;
    margin-bottom: 0.2em; }
    .item .item-title a {
      color: #646360; }
  .item .sub-heading {
    border-bottom: 1px solid #ece4cd;
    color: #c1a95f;
    font-family: "Titillium Web", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
    font-size: 0.9em;
    letter-spacing: .08em;
    margin-top: 3em;
    padding-bottom: 0.5em;
    text-transform: uppercase; }
  .item .view-source, .item .view-spec {
    -webkit-transition: all 0.15s ease-out 0s;
    -o-transition: all 0.15s ease-out 0s;
       transition: all 0.15s ease-out 0s;
    color: #c8c3b7;
    float: right;
    font-family: "Nunito", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
    font-size: 13px;
    font-weight: bold;
    line-height: 2.65em;
    margin-top: 1.5em;
    text-transform: capitalize; }
    .item .view-source:hover, .item .view-spec:hover {
      -webkit-border-radius: 20px;
              border-radius: 20px;
      color: #a69f8c; }
  .item .view-spec {
    margin-right: 20px; }
  @media screen and (min-width: 50em) {
    .item .item-type {
      width: 50%; } }
  .item .declaration pre {
    padding: 0.5em; }
  .item p {
    font-size: 1.1em;
    letter-spacing: 0.02em; }
  .item code {
    font-size: 0.85em; }

.example pre {
  position: relative; }
.example .description {
  background-color: #FFF;
  -webkit-border-bottom-left-radius: 0.4em;
          border-bottom-left-radius: 0.4em;
  -webkit-border-top-right-radius: 0.4em;
          border-top-right-radius: 0.4em;
  color: #c1a95f;
  font-family: "Nunito", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  font-weight: normal;
  letter-spacing: 0.1em;
  padding: 0.5em 1em;
  position: absolute;
  right: 0;
  top: 0; }

.search-bar {
  padding: 2em 0; }
  .search-bar .meta-data {
    float: left;
    font-family: "Titillium Web", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
    text-align: center; }
    .search-bar .meta-data h1 {
      display: inline-block;
      font-weight: 400;
      margin-bottom: 0; }
    .search-bar .meta-data span {
      font-weight: 100; }
  .search-bar .search-form {
    min-width: 18.75em;
    float: right;
    position: relative; }
    @media screen and (max-width: 39.375em) {
      .search-bar .search-form {
        width: 100%;
        margin-top: 1em; } }
    .search-bar .search-form input {
      margin-bottom: 0; }
  .search-bar .suggestion-container {
    background: rgba(255, 255, 255, 0.95);
    -webkit-border-radius: 0.4em;
            border-radius: 0.4em;
    -webkit-box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    list-style: none;
    padding: 0;
    position: absolute;
    top: 1.7em;
    width: 100%; }
  .search-bar .result {
    border-bottom: 1px solid rgba(221, 221, 221, 0.5); }
    .search-bar .result:first-child a {
      -webkit-border-top-left-radius: 0.4em;
              border-top-left-radius: 0.4em;
      -webkit-border-top-right-radius: 0.4em;
              border-top-right-radius: 0.4em; }
    .search-bar .result:last-child {
      border-bottom: none; }
      .search-bar .result:last-child a {
        -webkit-border-bottom-left-radius: 0.4em;
                border-bottom-left-radius: 0.4em;
        -webkit-border-bottom-right-radius: 0.4em;
                border-bottom-right-radius: 0.4em; }
    .search-bar .result[data-type=mixin] code {
      background: #86BFC8; }
    .search-bar .result[data-type=function] code {
      background: #C3D9CC; }
    .search-bar .result[data-type=variable] code {
      background: #B587A2; }
    .search-bar .result a {
      color: #867234;
      padding: 1em;
      display: block; }
      .search-bar .result a:hover {
        background: #FAF8F2; }
    .search-bar .result code {
      border: none;
      color: #FFF;
      font-size: 0.9em;
      margin-right: 0.5em;
      text-transform: uppercase; }

input,
label,
select {
  display: block;
  font-family: "Nunito", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  font-size: 1em; }

textarea,
input[type="email"], input[type="number"], input[type="password"], input[type="search"], input[type="tel"], input[type="text"], input[type="url"], input[type="color"], input[type="date"], input[type="datetime"], input[type="datetime-local"], input[type="month"], input[type="time"], input[type="week"],
select[multiple=multiple] {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  -webkit-transition: border-color;
  -o-transition: border-color;
     transition: border-color;
  background-color: white;
  -webkit-border-radius: 0.4em;
          border-radius: 0.4em;
  border: 1px solid #DDD;
  -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.06);
          box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.06);
  font-family: "Nunito", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  font-size: 1em;
  margin-bottom: 0.75em;
  padding: 0.5em 0.5em;
  width: 100%; }
  textarea:hover,
  input[type="email"]:hover, input[type="number"]:hover, input[type="password"]:hover, input[type="search"]:hover, input[type="tel"]:hover, input[type="text"]:hover, input[type="url"]:hover, input[type="color"]:hover, input[type="date"]:hover, input[type="datetime"]:hover, input[type="datetime-local"]:hover, input[type="month"]:hover, input[type="time"]:hover, input[type="week"]:hover,
  select[multiple=multiple]:hover {
    border-color: #c4c4c4; }
  textarea:focus,
  input[type="email"]:focus, input[type="number"]:focus, input[type="password"]:focus, input[type="search"]:focus, input[type="tel"]:focus, input[type="text"]:focus, input[type="url"]:focus, input[type="color"]:focus, input[type="date"]:focus, input[type="datetime"]:focus, input[type="datetime-local"]:focus, input[type="month"]:focus, input[type="time"]:focus, input[type="week"]:focus,
  select[multiple=multiple]:focus {
    border-color: #4797c3;
    outline: none; }

textarea {
  resize: vertical; }

input[type="search"] {
  -webkit-appearance: none;
  -moz-appearance: none;
  -ms-appearance: none;
  -o-appearance: none;
  appearance: none; }

input[type="checkbox"],
input[type="radio"] {
  display: inline;
  margin-right: 0.375em; }

input[type="file"] {
  padding-bottom: 0.75em;
  width: 100%; }

select {
  margin-bottom: 1.5em;
  max-width: 100%;
  width: auto; }

table {
  border-collapse: collapse;
  margin: 0.75 0;
  table-layout: fixed;
  width: 100%; }

th {
  border-bottom: 1px solid #b7b7b7;
  font-weight: bold;
  padding: 0.75 0;
  text-align: left; }

td {
  border-bottom: 1px solid #DDD;
  padding: 0.75 0; }

tr, td, th {
  vertical-align: middle; }
